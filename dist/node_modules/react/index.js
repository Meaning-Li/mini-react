(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.index = global.index || {}, global.index.js = {})));
})(this, (function (exports) { 'use strict';

	const currentDispatcher = {
	    current: null
	};
	function resolveDispatcher() {
	    const dispatcher = currentDispatcher.current;
	    if (dispatcher === null) {
	        throw new Error('Hooks 只能在函数组件中使用');
	    }
	    return dispatcher;
	}

	const surportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = surportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	function ReactElement(type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'miniReact'
	    };
	    return element;
	}
	function jsx(type, config, ...maybeChildren) {
	    let key = null;
	    let ref = null;
	    const props = {};
	    for (const prop in config) {
	        if (prop === 'key' && config[prop] !== undefined) {
	            key = '' + config[prop];
	            continue;
	        }
	        if (prop === 'ref' && config[prop] !== undefined) {
	            ref = config[prop];
	            continue;
	        }
	        if (Object.hasOwnProperty.call(config, prop)) {
	            props[prop] = config[prop];
	        }
	    }
	    const maybeChildrenLength = maybeChildren.length;
	    if (maybeChildrenLength) {
	        if (maybeChildrenLength === 1) {
	            props.children = maybeChildren[0];
	        }
	        else {
	            props.children = maybeChildren;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	}
	function isValidElement$1(object) {
	    return (typeof object === 'object' &&
	        object !== null &&
	        object.$$typeof === REACT_ELEMENT_TYPE);
	}
	function jsxDEV(type, config) {
	    let key = null;
	    let ref = null;
	    const props = {};
	    for (const prop in config) {
	        if (prop === 'key' && config[prop] !== undefined) {
	            key = '' + config[prop];
	            continue;
	        }
	        if (prop === 'ref' && config[prop] !== undefined) {
	            ref = config[prop];
	            continue;
	        }
	        if (Object.hasOwnProperty.call(config, prop)) {
	            props[prop] = config[prop];
	        }
	    }
	    return ReactElement(type, key, ref, props);
	}

	const useState = (initialState) => {
	    const dispatcher = resolveDispatcher();
	    return dispatcher.useState(initialState);
	};
	// 数据共享层
	const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRE = {
	    currentDispatcher
	};
	const version = '0.0.0';
	const createElement = jsx;
	const isValidElement = isValidElement$1;

	exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRE = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRE;
	exports.createElement = createElement;
	exports.isValidElement = isValidElement;
	exports.jsxDEV = jsxDEV;
	exports.useState = useState;
	exports.version = version;

}));
